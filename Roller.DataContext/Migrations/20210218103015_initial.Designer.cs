// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Roller.DContext;

namespace Roller.DataContext.Migrations
{
    [DbContext(typeof(RollerDataContext))]
    [Migration("20210218103015_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.Property<int?>("RoleId1");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.Property<int?>("UserId1");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("RoleId1");

                    b.Property<int?>("UserId1");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber");

                    b.Property<decimal?>("Balance");

                    b.Property<DateTime>("Created");

                    b.Property<int>("CustId");

                    b.Property<string>("Frequency");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("customerId");

                    b.HasKey("AccountId");

                    b.HasIndex("customerId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.Admin", b =>
                {
                    b.Property<int>("Admin_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Admin_Name");

                    b.Property<string>("Admin_address");

                    b.Property<string>("Admin_mobile");

                    b.HasKey("Admin_Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.Branch", b =>
                {
                    b.Property<int>("Branch_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Branch_Location");

                    b.HasKey("Branch_Id");

                    b.ToTable("Branchs");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.BranchManager", b =>
                {
                    b.Property<int>("Manager_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Manager_Balance");

                    b.Property<string>("Manager_LastPaymentDate");

                    b.Property<string>("Manager_Name");

                    b.Property<double>("Manager_Salary");

                    b.Property<double>("Manager_TotalPayment");

                    b.Property<string>("Manager_address");

                    b.Property<string>("Manager_branch");

                    b.Property<string>("Manager_mobile");

                    b.HasKey("Manager_Id");

                    b.ToTable("BranchManagers");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ccnumber");

                    b.Property<string>("Cctype");

                    b.Property<int?>("CustomerId");

                    b.Property<string>("Cvv2");

                    b.Property<int>("DispositionId");

                    b.Property<int>("ExpM");

                    b.Property<int>("ExpY");

                    b.Property<DateTime>("Issued");

                    b.Property<string>("Type");

                    b.HasKey("CardId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DispositionId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.Cashier", b =>
                {
                    b.Property<int>("Cashier_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cashier_Balance");

                    b.Property<string>("Cashier_LastPaymentDate");

                    b.Property<string>("Cashier_Name");

                    b.Property<double>("Cashier_Salary");

                    b.Property<double>("Cashier_TotalPayment");

                    b.Property<string>("Cashier_address");

                    b.Property<string>("Cashier_branch");

                    b.Property<string>("Cashier_mobile");

                    b.HasKey("Cashier_Id");

                    b.ToTable("Cashiers");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.CheckBook", b =>
                {
                    b.Property<int>("Check_id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Check_User_name");

                    b.Property<string>("Check_apply_Date");

                    b.Property<string>("Check_fixed_Date");

                    b.Property<string>("Check_status");

                    b.HasKey("Check_id");

                    b.ToTable("LoCheckBooks");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BVNNumber");

                    b.Property<DateTime?>("Birthday");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("CountryCode");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("CustAccNumber");

                    b.Property<string>("Cust_acc_type");

                    b.Property<decimal>("Cust_balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("Deadline");

                    b.Property<string>("Emailaddress");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("Givenname");

                    b.Property<string>("ImageThumbnailUrl");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastDateUpdated");

                    b.Property<string>("NationalId");

                    b.Property<string>("OtherNames");

                    b.Property<string>("Status");

                    b.Property<string>("Streetaddress");

                    b.Property<string>("Surname");

                    b.Property<string>("Telephonecountrycode");

                    b.Property<string>("Telephonenumber");

                    b.Property<int>("TransactionPin");

                    b.Property<string>("UpdatedBy");

                    b.Property<string>("UploadDocument");

                    b.Property<string>("Zipcode");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.Disposition", b =>
                {
                    b.Property<int>("DispositionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<int>("CustomerId");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Type");

                    b.HasKey("DispositionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Dispositions");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.EmailSentLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CopyTo");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<string>("DateToSend");

                    b.Property<string>("EmailContent");

                    b.Property<string>("Frequency");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsSent");

                    b.Property<DateTime?>("LastDateUpdated");

                    b.Property<string>("MessageBody");

                    b.Property<string>("Reciever");

                    b.Property<string>("RecieverName");

                    b.Property<string>("RecipientEmail");

                    b.Property<string>("Sender");

                    b.Property<string>("SentDate");

                    b.Property<string>("Status");

                    b.Property<string>("Subject");

                    b.Property<string>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("EmailSentLogs");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.Expense", b =>
                {
                    b.Property<int>("Expense_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Expense_amount");

                    b.Property<string>("Expense_date");

                    b.Property<string>("Expense_name");

                    b.HasKey("Expense_Id");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.HROfficer", b =>
                {
                    b.Property<int>("HR_acc_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("HR_Balance");

                    b.Property<string>("HR_LastPaymentDate");

                    b.Property<double>("HR_Salary");

                    b.Property<double>("HR_TotalPayment");

                    b.Property<string>("HR_address");

                    b.Property<string>("HR_branch");

                    b.Property<string>("HR_mobile");

                    b.Property<string>("HR_name");

                    b.HasKey("HR_acc_Id");

                    b.ToTable("HROfficers");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("AccountNumber");

                    b.Property<decimal>("Amount");

                    b.Property<decimal>("AmountTo_Pay");

                    b.Property<int>("CustId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Deadline");

                    b.Property<int>("Duration");

                    b.Property<string>("Frequency");

                    b.Property<decimal>("Interest_Rate");

                    b.Property<bool>("IsActive");

                    b.Property<int>("LOfficer_Id");

                    b.Property<string>("LoanCause");

                    b.Property<decimal>("Loan_Amount");

                    b.Property<decimal>("Loan_Amount_Paid");

                    b.Property<string>("Loan_Date");

                    b.Property<string>("Manager_Approval");

                    b.Property<decimal>("Payments");

                    b.Property<string>("Status");

                    b.Property<decimal>("Total_Paid");

                    b.HasKey("LoanId");

                    b.HasIndex("AccountId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.LoanInfo", b =>
                {
                    b.Property<int>("Loan_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AmountTo_Pay");

                    b.Property<int>("CustomerId");

                    b.Property<double>("Interest_Rate");

                    b.Property<int>("LOfficer_Id");

                    b.Property<string>("LoanCause");

                    b.Property<double>("Loan_Amount");

                    b.Property<double>("Loan_Amount_Paid");

                    b.Property<string>("Loan_Branch");

                    b.Property<string>("Loan_Date");

                    b.Property<string>("Loan_Deadline");

                    b.Property<string>("MD_Approval");

                    b.Property<string>("Manager_Approval");

                    b.Property<string>("Status");

                    b.Property<int>("User_acc_no");

                    b.HasKey("Loan_Id");

                    b.HasIndex("LOfficer_Id");

                    b.ToTable("LoanInfo");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.LoanOfficer", b =>
                {
                    b.Property<int>("LOfficer_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("LOfficer_Balance");

                    b.Property<string>("LOfficer_LastPaymentDate");

                    b.Property<double>("LOfficer_Salary");

                    b.Property<double>("LOfficer_TotalPayment");

                    b.Property<string>("LOfficer_address");

                    b.Property<string>("LOfficer_branch");

                    b.Property<string>("LOfficer_mobile");

                    b.Property<string>("LOfficer_name");

                    b.HasKey("LOfficer_Id");

                    b.ToTable("LoanOfficers");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.MDirector", b =>
                {
                    b.Property<int>("MD_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("MD_Balance");

                    b.Property<double>("MD_Salary");

                    b.Property<string>("MD_address");

                    b.Property<string>("MD_mobile");

                    b.Property<string>("MD_name");

                    b.HasKey("MD_Id");

                    b.ToTable("MDirectors");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.OTPLog", b =>
                {
                    b.Property<int>("OTPID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OTP");

                    b.HasKey("OTPID");

                    b.ToTable("OTPs");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.Officer", b =>
                {
                    b.Property<int>("Officer_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Officer_Balance");

                    b.Property<string>("Officer_LastPaymentDate");

                    b.Property<string>("Officer_Name");

                    b.Property<double>("Officer_Salary");

                    b.Property<double>("Officer_TotalPayment");

                    b.Property<string>("Officer_address");

                    b.Property<string>("Officer_branch");

                    b.Property<string>("Officer_mobile");

                    b.HasKey("Officer_Id");

                    b.ToTable("Officers");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.PermenentOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("AccountTo");

                    b.Property<decimal?>("Amount");

                    b.Property<string>("BankTo");

                    b.Property<string>("Symbol");

                    b.HasKey("OrderId");

                    b.HasIndex("AccountId");

                    b.ToTable("PermenentOrder");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.SupperAccount", b =>
                {
                    b.Property<int>("SupperId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<string>("CustAcctNumber");

                    b.Property<int?>("LoanId");

                    b.Property<string>("SupperAcctNumber");

                    b.Property<string>("SupperEmail");

                    b.Property<string>("SupperPhone");

                    b.Property<DateTime>("TransDate");

                    b.Property<string>("TransactDate");

                    b.HasKey("SupperId");

                    b.HasIndex("LoanId");

                    b.ToTable("SupperAccounts");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account");

                    b.Property<string>("AccountNumber");

                    b.Property<decimal>("Amount");

                    b.Property<string>("Attendant");

                    b.Property<decimal>("Balance");

                    b.Property<string>("Bank");

                    b.Property<int?>("CustomerId");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Depositor");

                    b.Property<string>("Operation");

                    b.Property<string>("ReferenceNo");

                    b.Property<string>("Symbol");

                    b.Property<string>("Tr_AccName");

                    b.Property<string>("Tr_Branch");

                    b.Property<string>("Tr_Date");

                    b.Property<string>("Tr_EmpType");

                    b.Property<string>("Tr_Through");

                    b.Property<string>("Type");

                    b.HasKey("TransactionId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.TransferOfficer", b =>
                {
                    b.Property<int>("TO_accId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TO_Balance");

                    b.Property<string>("TO_LastPaymentDate");

                    b.Property<string>("TO_Salary");

                    b.Property<double>("TO_TotalPayment");

                    b.Property<string>("TO_address");

                    b.Property<string>("TO_branch");

                    b.Property<string>("TO_mobile");

                    b.Property<string>("TO_name");

                    b.HasKey("TO_accId");

                    b.ToTable("TransferOfficers");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<int>("Age");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("ImageThumbnailUrl");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("LastName");

                    b.Property<string>("LastPaymentDate");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Salary");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("State");

                    b.Property<decimal>("TotalPayment")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UploadDocument");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("branch");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Roller.DataContext.Entity.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Roller.DataContext.Entity.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Roller.DataContext.Entity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Roller.DataContext.Entity.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Roller.DataContext.Entity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Roller.DataContext.Entity.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Roller.DataContext.Entity.Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId1");

                    b.HasOne("Roller.DataContext.Entity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Roller.DataContext.Entity.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Roller.DataContext.Entity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Roller.DataContext.Entity.Account", b =>
                {
                    b.HasOne("Roller.DataContext.Entity.Customer", "customer")
                        .WithMany("Accounts")
                        .HasForeignKey("customerId");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.Card", b =>
                {
                    b.HasOne("Roller.DataContext.Entity.Customer")
                        .WithMany("Cards")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Roller.DataContext.Entity.Disposition", "Disposition")
                        .WithMany("Cards")
                        .HasForeignKey("DispositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Roller.DataContext.Entity.Disposition", b =>
                {
                    b.HasOne("Roller.DataContext.Entity.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Roller.DataContext.Entity.Customer", "Customer")
                        .WithMany("Dispositions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Roller.DataContext.Entity.Loan", b =>
                {
                    b.HasOne("Roller.DataContext.Entity.Account", "Account")
                        .WithMany("Loans")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Roller.DataContext.Entity.LoanInfo", b =>
                {
                    b.HasOne("Roller.DataContext.Entity.LoanOfficer", "LoanOfficer")
                        .WithMany()
                        .HasForeignKey("LOfficer_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Roller.DataContext.Entity.PermenentOrder", b =>
                {
                    b.HasOne("Roller.DataContext.Entity.Account", "Account")
                        .WithMany("PermenentOrders")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Roller.DataContext.Entity.SupperAccount", b =>
                {
                    b.HasOne("Roller.DataContext.Entity.Loan", "Loan")
                        .WithMany("SupperAccount")
                        .HasForeignKey("LoanId");
                });

            modelBuilder.Entity("Roller.DataContext.Entity.Transaction", b =>
                {
                    b.HasOne("Roller.DataContext.Entity.Customer", "Customers")
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerId");
                });
#pragma warning restore 612, 618
        }
    }
}
